import java.io.*;
import java.util.*;

public class Main {

  public static class PriorityQueue {
    ArrayList<Integer> data;

    public PriorityQueue() {
      data = new ArrayList<>();
    }
    
    public void swap(int i,int j){
        int iVal=data.get(i);
        int jVal=data.get(j);
        data.set(i,jVal);
        data.set(j,iVal);
    }
    
    public void upheapify(int ci){
    if(ci==0){
        return;
    }
    int pi = (ci-1)/2;
    if(data.get(pi)>data.get(ci)){
        swap(pi,ci);
        upheapify(pi);
     }
    }
    
    public void add(int val) {
     data.add(val);
     upheapify(data.size()-1);
    }
    
    public void downHeapify(int pi){
        int lci=(pi*2)+1;
        int rci=(pi*2)+2;
        int minIdx = pi;
        if(lci<data.size() && data.get(minIdx)>data.get(lci)){
            minIdx = lci;
        }
        if(rci<data.size() && data.get(minIdx)>data.get(rci)){
            minIdx = rci;
        }
        if(minIdx!=pi){
            swap(minIdx,pi);
            downHeapify(minIdx);
        }
    }

    public int remove() {
     if(size()==0){
         System.out.println("Underflow");
         return -1;
     }
     swap(0,data.size()-1);
     int HPele = data.remove(data.size()-1);
     downHeapify(0);
     return HPele;
    }

    public int peek() {
     if(size()==0){
         System.out.println("Underflow");
         return -1;
     }    
     return data.get(0);
    }

    public int size() {
     return data.size();
    }
  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    PriorityQueue qu = new PriorityQueue();

    String str = br.readLine();
    while (str.equals("quit") == false) {
      if (str.startsWith("add")) {
        int val = Integer.parseInt(str.split(" ")[1]);
        qu.add(val);
      } else if (str.startsWith("remove")) {
        int val = qu.remove();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("peek")) {
        int val = qu.peek();
        if (val != -1) {
          System.out.println(val);
        }
      } else if (str.startsWith("size")) {
        System.out.println(qu.size());
      }
      str = br.readLine();
    }
  }
}
